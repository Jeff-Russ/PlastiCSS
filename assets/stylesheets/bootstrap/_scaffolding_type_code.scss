// _scaffolding.scss _type.scss and code.scss in in one file.

@if $scaffolding == true {
  /* BEGIN Scaffolding ========================================================
  */
    
  /* Reset the box-sizing
     Heads up! This reset may cause conflicts with some third-party widgets.
     For recommendations on resolving such conflicts, see
     http://getbootstrap.com/getting-started/#third-box-sizing */
  * { @include box-sizing(border-box); }
  *:before, *:after { @include box-sizing(border-box); }
  
  /* Body reset */
  
  html { font-size: 10px; -webkit-tap-highlight-color: rgba(0,0,0,0);}
  
  body { font-family: $font-family-base; font-size: $font-size-base;
    line-height: $line-height-base; color: $text-color;
    background-color: $body-bg;}
  
  /* Reset fonts for relevant elements */
  input, button, select, textarea { font-family: inherit; font-size: inherit; line-height: inherit; }
  
  a { color: $link-color; text-decoration: none;
    &:hover, &:focus { color: $link-hover-color; text-decoration: $link-hover-decoration; }
    &:focus { @include tab-focus; }
  }
  
  /* Figures
     We reset this here because previously Normalize had no `figure` margins. This
     ensures we don't break anyone's use of the element. */
  figure { margin: 0; }
  img { vertical-align: middle; }
  /* Responsive images (ensure images don't scale beyond their parents) */
  %img-responsive { @include img-responsive; }
  /* Rounded corners */
  %img-rounded { border-radius: $border-radius-large; }
  
  /* Image thumbnails
     Heads up! This is mixin-ed into thumbnails.less for `.thumbnail`. */
  %img-thumbnail {
    padding: $thumbnail-padding; line-height: $line-height-base;
    background-color: $thumbnail-bg; border: 1px solid $thumbnail-border;
    border-radius: $thumbnail-border-radius; @include transition(all .2s ease-in-out);
  /* Keep them at most 100% wide */
    @include img-responsive(inline-block);
  }
  /* Perfect circle - set radius in percents */
  %img-circle { border-radius: 50%; }
  
  hr {
    margin-top: $line-height-computed; margin-bottom: $line-height-computed;
    border: 0; border-top: 1px solid $hr-border;
  }
  /* Only display content to screen readers
     See: http://a11yproject.com/posts/how-to-hide-content/ */
  %sr-only {
    position: absolute; width: 1px; height: 1px; margin: -1px; padding: 0;
    overflow: hidden; clip: rect(0,0,0,0); border: 0;
  }
  /* Use in conjunction with .sr-only to only display content when it's focused.
     Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
     Credit: HTML5 Boilerplate  */
  %sr-only-focusable { &:active, &:focus { position: static; width: auto; height: auto; margin: 0; overflow: visible; clip: auto; } }
  
  /* iOS "clickable elements" fix for role="button"
     Fixes "clickability" issue (and more generally, the firing of events such as focus as well)
     for traditionally non-focusable elements with role="button"
     see https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile  */
  [role="button"] { cursor: pointer; }
  
  /* END Scaffolding ========================================================
  */
}

@mixin make_scaffold_classes ($classes...) {
	@if nth($classes, 1) != false {
		@if nth($classes, 1) == all or nth($classes, 1) == true {
			$classes: img-responsive img-rounded img-thumbnail img-circle sr-only sr-only-focusable;
		}
		@each $class in $classes {
			.#{$class} { @extend%#{$class};}
		}
	}
} 

//// BEGIN _type.scss =========================================================
// used only here in this file:
%h_temp-class {
  font-family: $headings-font-family; font-weight: $headings-font-weight;
  line-height: $headings-line-height; color: $headings-color; }
%small_temp-class { font-weight: normal; line-height: 1; color: $headings-small-color; }
%h1-h3_temp-class { margin-top: $line-height-computed; margin-bottom: ($line-height-computed / 2); }
%h4-h6_temp-class { margin-top: ($line-height-computed / 2); margin-bottom: ($line-height-computed / 2); }

@if $html_h_size == true {
  /* Headings (Typography) */
  h1, h2, h3, h4, h5, h6 { @extend%h_temp-class; small { @extend%small_temp-class; }}
  h1, h2, h3 { @extend%h1-h3_temp-class; small { font-size: 65%; } }
  h4, h5, h6 { @extend%h4-h6_temp-class; small { font-size: 75%; } }
  h1 { font-size: $font-size-h1; }
  h2 { font-size: $font-size-h2; }
  h3 { font-size: $font-size-h3; }
  h4 { font-size: $font-size-h4; }
  h5 { font-size: $font-size-h5; }
  h6 { font-size: $font-size-h6; }
}

@if $twbs_h_size == true {
  %h1, %h2, %h3, %h4, %h5, %h6 {
    @extend%h_temp-class; %small { @extend%small_temp-class; }}
  %h1, %h2, %h3 { @extend%h1-h3_temp-class; %small { font-size: 65%; } }
  %h4, %h5, %h6 { @extend%h4-h6_temp-class; %small { font-size: 75%; } }
  %h1 { font-size: $font-size-h1; }
  %h2 { font-size: $font-size-h2; }
  %h3 { font-size: $font-size-h3; }
  %h4 { font-size: $font-size-h4; }
  %h5 { font-size: $font-size-h5; }
  %h6 { font-size: $font-size-h6; }
}

@if $html_p_small_mark == true {
  /* Body text (Typography) */
  p { margin: 0 0 ($line-height-computed / 2); }
  
  /* Emphasis & misc
     -------------------------
     Ex: (12px small font / 14px base font) * 100% = about 85% */
  small, %small { font-size: floor((100% * $font-size-small / $font-size-base)); }
  
  mark, %mark { background-color: $state-warning-bg; padding: .2em; }
}

@if $text-color_classes == true {
  /* begin text-color_classes (Typography) */
  @include text-emphasis-variant('.text-primary', $brand-primary);
  @include text-emphasis-variant('.text-success', $state-success-text);
  @include text-emphasis-variant('.text-info', $state-info-text);
  @include text-emphasis-variant('.text-warning', $state-warning-text);
  @include text-emphasis-variant('.text-danger', $state-danger-text);
  
  @include bg-variant('.bg-primary', $brand-primary);
  @include bg-variant('.bg-success', $state-success-bg);
  @include bg-variant('.bg-info', $state-info-bg);
  @include bg-variant('.bg-warning', $state-warning-bg);
  @include bg-variant('.bg-danger', $state-danger-bg);
  /* end text-color_classes */
}

@if $html_lists_w_classes == true {
  /* Lists (Typography)
     Unordered and Ordered lists */
  ul, ol { margin-top: 0; margin-bottom: ($line-height-computed / 2);
    ul,ol { margin-bottom: 0; }
  }
  /* List options (Typography)
     [converter] extracted from `.list-unstyled` for libsass compatibility */
  // @mixin list-unstyled { padding-left: 0; list-style: none; } 
  /* [converter] extracted as `@mixin list-unstyled` for libsass compatibility */
  .list-unstyled { padding-left: 0; list-style: none; } 
  /* Inline turns list items into inline-block */
  .list-inline { padding-left: 0; list-style: none; margin-left: -5px; 
    > li { display: inline-block; padding-left: 5px; padding-right: 5px; }
  }
  /* Description Lists ( desc_lists Typography )*/
  dl {
    /* Remove browser default */
    margin-top: 0; 
    margin-bottom: $line-height-computed; }
  dt, dd { line-height: $line-height-base; }
  dt { font-weight: bold; }
  dd { 
    /* Undo browser default */
    margin-left: 0; }
      
  /* Horizontal description lists (Typography)
     Defaults to being stacked without any of the below styles applied, until the
     grid breakpoint is reached (default of ~768px).*/
  .dl-horizontal { dd { @include clearfix; } // Clear the floated `dt` if an empty `dd` is present
    @media (min-width: $dl-horizontal-breakpoint) {
      dt { float: left; width: ($dl-horizontal-offset - 20); clear: left; text-align: right;
        @include text-overflow; }
      dd { margin-left: $dl-horizontal-offset; } }
  }
}
  
@if $html_blockquote_w_reverse == true {
  /* blockquote (Typography) */
  blockquote {
    padding: ($line-height-computed / 2) $line-height-computed; margin: 0 0 $line-height-computed;
    font-size: $blockquote-font-size; border-left: 5px solid $blockquote-border-color;
    p, ul, ol { &:last-child { margin-bottom: 0; } }
    // Note: Deprecated small and .small as of v3.1.0
    // Context: https://github.com/twbs/bootstrap/issues/11660
    footer,   small,   %small { display: block; font-size: 80%; // back to default font-size
      line-height: $line-height-base; color: $blockquote-small-color;
      &:before { content: '\2014 \00A0';/* em dash, nbsp */ } } }
  /* Opposite alignment of blockquote
     Heads up: `blockquote.pull-right` has been deprecated as of v3.1.0. */
  .blockquote-reverse, blockquote.pull-right {
    padding-right: 15px; padding-left: 0; border-right: 5px solid $blockquote-border-color;
    border-left: 0; text-align: right;
    // Account for citation
    footer, small, %small {
      &:before { content: ''; }
      &:after { content: '\00A0 \2014'; } } } // nbsp, em dash
}

@if $html_abbr_address == true {
  /* Misc (Typography)
     -------------------------
     Abbreviations and acronyms */
  abbr[title], // Add data-* attribute to help out our tooltip plugin, per https://github.com/twbs/bootstrap/issues/5257
  abbr[data-original-title] {
    cursor: help; border-bottom: 1px dotted $abbr-border-color; }
    
  address { margin-bottom: $line-height-computed; font-style: normal; line-height: $line-height-base; }
}

@if $text_helpers_classes == true {
  /* Contextual colors (Typography) */
  .text-muted { color: $text-muted; }
  
  /* Contextual backgrounds (Typography)
     For now we'll leave these alongside the text classes until v4 when we can
     safely shift things around (per SemVer rules).
     Given the contrast here, this is the only class to have its color inverted automatically */
  .bg-primary { color: #fff; }
  
  /* Page header (Typography)
     ------------------------- */
  .page-header {
    padding-bottom: (($line-height-computed / 2) - 1);
    margin: ($line-height-computed * 2) 0 $line-height-computed;
    border-bottom: 1px solid $page-header-border-color;
  }
  
  .lead { margin-bottom: $line-height-computed; font-size: floor(($font-size-base * 1.15)); 
    font-weight: 300; line-height: 1.4;
    @media (min-width: $screen-sm-min) { font-size: ($font-size-base * 1.5); }
  }
  
  /* Alignment (Typography) */
  .text-left           { text-align: left; }
  .text-right          { text-align: right; }
  .text-center         { text-align: center; }
  .text-justify        { text-align: justify; }
  .text-nowrap         { white-space: nowrap; }
  
  /* Transformation (Typography) */
  .text-lowercase      { text-transform: lowercase; }
  .text-uppercase      { text-transform: uppercase; }
  .text-capitalize     { text-transform: capitalize; }
  
  .initialism { font-size: 90%; @extend .text-uppercase; }
}
//// END _type.scss ============================================================

@if $html_code_tags == true {
  /* BEGIN code.scss
    html_code_tags (inline and block) ==========================================
  */
  // Inline and block code styles
  code, kbd, pre, samp {
    font-family: $font-family-monospace; }
  
  /* Inline code  */
  code {
    padding: 2px 4px; font-size: 90%; color: $code-color; background-color: $code-bg;
    border-radius: $border-radius-base;
  }
  
  /* User input typically entered via keyboard */
  kbd {
    padding: 2px 4px; font-size: 90%; color: $kbd-color; background-color: $kbd-bg;
    border-radius: $border-radius-small; box-shadow: inset 0 -1px 0 rgba(0,0,0,.25);
    kbd {
      padding: 0; font-size: 100%; font-weight: bold; box-shadow: none; }
  }
  
  /* Blocks of code */
  pre {
    display: block; padding: (($line-height-computed - 1) / 2);
    margin: 0 0 ($line-height-computed / 2); font-size: ($font-size-base - 1); // 14px to 13px
    line-height: $line-height-base; word-break: break-all; word-wrap: break-word;
    color: $pre-color; background-color: $pre-bg; border: 1px solid $pre-border-color;
    /* Account for some code outputs that place code tags in pre tags */
    border-radius: $border-radius-base; 
    code {
      padding: 0; font-size: inherit; color: inherit; white-space: pre-wrap;
      background-color: transparent; border-radius: 0; }
  }
  /* Enable scrollable blocks of code */
  .pre-scrollable { max-height: $pre-scrollable-max-height; overflow-y: scroll; }
  
  /* END code.scss
    html_code_tags (inline and block) ==========================================
  */
}
