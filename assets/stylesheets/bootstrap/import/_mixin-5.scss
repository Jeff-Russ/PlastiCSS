
// _mixin-5.scss

//// Components - cont. ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


// _panels.scss ================================================================
@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
  border-color: $border;

  & > %panel-heading { color: $heading-text-color;background-color: $heading-bg-color; border-color: $heading-border;

    + %panel-collapse > %panel-body { border-top-color: $border; }
    %badge { color: $heading-bg-color; background-color: $heading-text-color;}
  }
  & > %panel-footer {
    + %panel-collapse > %panel-body { border-bottom-color: $border;}
  }
}

// _pagination.scss ============================================================
@mixin pagination-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  > li {
    > a, > span {
      padding: $padding-vertical $padding-horizontal; font-size: $font-size;line-height: $line-height;
    }
    &:first-child {
      > a, > span { @include border-left-radius($border-radius); } }
    &:last-child{
      > a, > span { @include border-right-radius($border-radius); } }
  }
}

// _list-groups.scss ===========================================================
@mixin list-group-item-variant($state, $background, $color) {
  // [converter] extracted a&, button& to a.list-group-item-#{$state}, button.list-group-item-#{$state}
  %list-group-item-#{$state} { color: $color; background-color: $background;}

  a.list-group-item-#{$state}, button.list-group-item-#{$state} {
    color: $color;

    %list-group-item-heading { color: inherit;}

    &:hover, &:focus {
      color: $color; background-color: darken($background, 5%);}
      
    &.active, &.active:hover,&.active:focus {
      color: #fff;   background-color: $color; border-color: $color;}
  }
}
// _nav-divider.scss ===========================================================
// Horizontal dividers - Dividers (basically an hr) within dropdowns and nav lists 
@mixin nav-divider($color: #e5e5e5) {
  height: 1px; margin: (($line-height-computed / 2) - 1) 0;
  overflow: hidden; background-color: $color;
}

// _forms.scss =================================================================
// Form validation states
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
  %help-block, %control-label, %radio, %checkbox, %radio-inline,  %checkbox-inline,
  &.radio label, &.checkbox label, &.radio-inline label, &.checkbox-inline label  {
    color: $text-color; } // Color the label and help text
  
  %form-control { // Set the border and box shadow on specific inputs to match
    border-color: $border-color;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    
    &:focus { border-color: darken($border-color, 10%);
      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
      @include box-shadow($shadow); }
  }
  // Set validation states also for addons
  %input-group-addon { color: $text-color; border-color: $border-color; background-color: $background-color; }
  %form-control-feedback { color: $text-color;} // Optional feedback icon
}

// Form control focus state
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-border-focus` variable.
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background. 
@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus { border-color: $color; outline: 0;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba);
  }
}

// Form control sizing
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!
// [converter] $parent hack 
@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  #{$parent} { height: $input-height; padding: $padding-vertical $padding-horizontal;
    font-size: $font-size; line-height: $line-height; border-radius: $border-radius;
  }
  select#{$parent} { height: $input-height; Line-height: $input-height; }
  textarea#{$parent},  select[multiple]#{$parent} { height: auto;}
}


// _progress-bar.scss ==========================================================
@mixin progress-bar-variant($color) { background-color: $color;
  %progress-striped & { @include gradient-striped; } // Deprecated parent class requirement as of v3.2.0
}

// _table-row.scss =============================================================
@mixin table-row-variant($state, $background) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  %table > thead > tr,
  %table > tbody > tr,
  %table > tfoot > tr {
    > td.#{$state},
    > th.#{$state},
    &.#{$state} > td,
    &.#{$state} > th { background-color: $background; }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  %table-hover > tbody > tr {
    > td.#{$state}:hover,
    > th.#{$state}:hover,
    &.#{$state}:hover > td,
    &:hover > %#{$state},
    &.#{$state}:hover > th { background-color: darken($background, 5%); }
  }
}


//// Skins /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// _background-variant.scss 
// Contextual backgrounds - [converter] $parent hack 
@mixin bg-variant($parent, $color) {
  #{$parent} { background-color: $color; }
  a#{$parent}:hover, a#{$parent}:focus { background-color: darken($color, 10%); }
}

// _border-radius.scss =========================================================
// Single side border-radius 
@mixin border-top-radius($radius)    { border-top-right-radius: $radius; border-top-left-radius: $radius; }
@mixin border-right-radius($radius)  { border-bottom-right-radius: $radius; border-top-right-radius: $radius; }
@mixin border-bottom-radius($radius) { border-bottom-right-radius: $radius; border-bottom-left-radius: $radius; }
@mixin border-left-radius($radius)   { border-bottom-left-radius: $radius;  border-top-left-radius: $radius; }


// _gradients.scss =============================================================
// Horizontal gradient, from left to right
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below. 
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below. 
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}


